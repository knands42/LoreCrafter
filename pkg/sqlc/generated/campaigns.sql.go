// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: campaigns.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCampaign = `-- name: CreateCampaign :one
INSERT INTO campaigns (
    id,
    title,
    game_system,
    number_of_players,
    status,
    setting_summary,
    setting,
    image_url,
    setting_metadata,
    setting_ai_metadata,
    is_public,
    created_by
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
) RETURNING id, title, setting_summary, setting, game_system, number_of_players, status, image_url, is_public, invite_code, setting_metadata, setting_ai_metadata, created_by, created_at, updated_at
`

type CreateCampaignParams struct {
	ID                pgtype.UUID        `json:"id"`
	Title             string             `json:"title"`
	GameSystem        GameSystemEnum     `json:"game_system"`
	NumberOfPlayers   pgtype.Int2        `json:"number_of_players"`
	Status            CampaignStatusEnum `json:"status"`
	SettingSummary    pgtype.Text        `json:"setting_summary"`
	Setting           pgtype.Text        `json:"setting"`
	ImageUrl          pgtype.Text        `json:"image_url"`
	SettingMetadata   []byte             `json:"setting_metadata"`
	SettingAiMetadata []byte             `json:"setting_ai_metadata"`
	IsPublic          bool               `json:"is_public"`
	CreatedBy         pgtype.UUID        `json:"created_by"`
}

func (q *Queries) CreateCampaign(ctx context.Context, arg CreateCampaignParams) (Campaign, error) {
	row := q.db.QueryRow(ctx, createCampaign,
		arg.ID,
		arg.Title,
		arg.GameSystem,
		arg.NumberOfPlayers,
		arg.Status,
		arg.SettingSummary,
		arg.Setting,
		arg.ImageUrl,
		arg.SettingMetadata,
		arg.SettingAiMetadata,
		arg.IsPublic,
		arg.CreatedBy,
	)
	var i Campaign
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.SettingSummary,
		&i.Setting,
		&i.GameSystem,
		&i.NumberOfPlayers,
		&i.Status,
		&i.ImageUrl,
		&i.IsPublic,
		&i.InviteCode,
		&i.SettingMetadata,
		&i.SettingAiMetadata,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createCampaignMember = `-- name: CreateCampaignMember :one
INSERT INTO campaign_members (
    id,
    campaign_id,
    user_id,
    role
) VALUES (
    $1, $2, $3, $4
) RETURNING id, campaign_id, user_id, role, joined_at, last_accessed
`

type CreateCampaignMemberParams struct {
	ID         pgtype.UUID `json:"id"`
	CampaignID pgtype.UUID `json:"campaign_id"`
	UserID     pgtype.UUID `json:"user_id"`
	Role       MemberRole  `json:"role"`
}

func (q *Queries) CreateCampaignMember(ctx context.Context, arg CreateCampaignMemberParams) (CampaignMember, error) {
	row := q.db.QueryRow(ctx, createCampaignMember,
		arg.ID,
		arg.CampaignID,
		arg.UserID,
		arg.Role,
	)
	var i CampaignMember
	err := row.Scan(
		&i.ID,
		&i.CampaignID,
		&i.UserID,
		&i.Role,
		&i.JoinedAt,
		&i.LastAccessed,
	)
	return i, err
}

const deleteCampaign = `-- name: DeleteCampaign :exec
DELETE FROM campaigns AS c
USING campaign_members AS cm
WHERE cm.campaign_id = c.id
  AND c.id = $1
  AND (
     (cm.user_id = $2 AND cm.role = 'gm'::member_role)
     OR c.created_by = $2
     )
`

type DeleteCampaignParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) DeleteCampaign(ctx context.Context, arg DeleteCampaignParams) error {
	_, err := q.db.Exec(ctx, deleteCampaign, arg.ID, arg.UserID)
	return err
}

const deleteCampaignMember = `-- name: DeleteCampaignMember :exec
DELETE FROM campaign_members
WHERE campaign_id = $1 AND user_id = $2
`

type DeleteCampaignMemberParams struct {
	CampaignID pgtype.UUID `json:"campaign_id"`
	UserID     pgtype.UUID `json:"user_id"`
}

func (q *Queries) DeleteCampaignMember(ctx context.Context, arg DeleteCampaignMemberParams) error {
	_, err := q.db.Exec(ctx, deleteCampaignMember, arg.CampaignID, arg.UserID)
	return err
}

const generateInviteCode = `-- name: GenerateInviteCode :one
UPDATE campaigns
SET invite_code = $2
WHERE id = $1
RETURNING id, title, setting_summary, setting, game_system, number_of_players, status, image_url, is_public, invite_code, setting_metadata, setting_ai_metadata, created_by, created_at, updated_at
`

type GenerateInviteCodeParams struct {
	ID         pgtype.UUID `json:"id"`
	InviteCode pgtype.Text `json:"invite_code"`
}

func (q *Queries) GenerateInviteCode(ctx context.Context, arg GenerateInviteCodeParams) (Campaign, error) {
	row := q.db.QueryRow(ctx, generateInviteCode, arg.ID, arg.InviteCode)
	var i Campaign
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.SettingSummary,
		&i.Setting,
		&i.GameSystem,
		&i.NumberOfPlayers,
		&i.Status,
		&i.ImageUrl,
		&i.IsPublic,
		&i.InviteCode,
		&i.SettingMetadata,
		&i.SettingAiMetadata,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCampaignByID = `-- name: GetCampaignByID :one
SELECT
    c.id,
    c.title,
    c.setting_summary,
    c.setting,
    c.game_system,
    c.number_of_players,
    c.status,
    c.image_url,
    c.is_public,
    c.invite_code,
    c.setting_metadata,
    c.setting_ai_metadata,
    c.created_by,
    c.created_at,
    c.updated_at
    FROM campaigns as c
                  LEFT JOIN campaign_members as cm
                            ON c.id = cm.campaign_id AND cm.user_id = $2
WHERE c.id = $1 AND (
    c.is_public = true OR cm.user_id IS NOT NULL
    )
LIMIT 1
`

type GetCampaignByIDParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) GetCampaignByID(ctx context.Context, arg GetCampaignByIDParams) (Campaign, error) {
	row := q.db.QueryRow(ctx, getCampaignByID, arg.ID, arg.UserID)
	var i Campaign
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.SettingSummary,
		&i.Setting,
		&i.GameSystem,
		&i.NumberOfPlayers,
		&i.Status,
		&i.ImageUrl,
		&i.IsPublic,
		&i.InviteCode,
		&i.SettingMetadata,
		&i.SettingAiMetadata,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCampaignByInviteCode = `-- name: GetCampaignByInviteCode :one
SELECT id, title, setting_summary, setting, game_system, number_of_players, status, image_url, is_public, invite_code, setting_metadata, setting_ai_metadata, created_by, created_at, updated_at FROM campaigns
WHERE invite_code = $1
LIMIT 1
`

func (q *Queries) GetCampaignByInviteCode(ctx context.Context, inviteCode pgtype.Text) (Campaign, error) {
	row := q.db.QueryRow(ctx, getCampaignByInviteCode, inviteCode)
	var i Campaign
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.SettingSummary,
		&i.Setting,
		&i.GameSystem,
		&i.NumberOfPlayers,
		&i.Status,
		&i.ImageUrl,
		&i.IsPublic,
		&i.InviteCode,
		&i.SettingMetadata,
		&i.SettingAiMetadata,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCampaignMember = `-- name: GetCampaignMember :one
SELECT id, campaign_id, user_id, role, joined_at, last_accessed FROM campaign_members
WHERE campaign_id = $1 AND user_id = $2
LIMIT 1
`

type GetCampaignMemberParams struct {
	CampaignID pgtype.UUID `json:"campaign_id"`
	UserID     pgtype.UUID `json:"user_id"`
}

func (q *Queries) GetCampaignMember(ctx context.Context, arg GetCampaignMemberParams) (CampaignMember, error) {
	row := q.db.QueryRow(ctx, getCampaignMember, arg.CampaignID, arg.UserID)
	var i CampaignMember
	err := row.Scan(
		&i.ID,
		&i.CampaignID,
		&i.UserID,
		&i.Role,
		&i.JoinedAt,
		&i.LastAccessed,
	)
	return i, err
}

const listCampaignMembers = `-- name: ListCampaignMembers :many
SELECT id, campaign_id, user_id, role, joined_at, last_accessed FROM campaign_members
WHERE campaign_id = $1
`

func (q *Queries) ListCampaignMembers(ctx context.Context, campaignID pgtype.UUID) ([]CampaignMember, error) {
	rows, err := q.db.Query(ctx, listCampaignMembers, campaignID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignMember{}
	for rows.Next() {
		var i CampaignMember
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.UserID,
			&i.Role,
			&i.JoinedAt,
			&i.LastAccessed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCampaignsByUserID = `-- name: ListCampaignsByUserID :many
SELECT c.id, c.title, c.setting_summary, c.setting, c.game_system, c.number_of_players, c.status, c.image_url, c.is_public, c.invite_code, c.setting_metadata, c.setting_ai_metadata, c.created_by, c.created_at, c.updated_at FROM campaigns c
JOIN campaign_members cm ON c.id = cm.campaign_id
WHERE cm.user_id = $1
`

func (q *Queries) ListCampaignsByUserID(ctx context.Context, userID pgtype.UUID) ([]Campaign, error) {
	rows, err := q.db.Query(ctx, listCampaignsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Campaign{}
	for rows.Next() {
		var i Campaign
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.SettingSummary,
			&i.Setting,
			&i.GameSystem,
			&i.NumberOfPlayers,
			&i.Status,
			&i.ImageUrl,
			&i.IsPublic,
			&i.InviteCode,
			&i.SettingMetadata,
			&i.SettingAiMetadata,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCampaign = `-- name: UpdateCampaign :one
UPDATE campaigns as c
SET 
    title = $3,
    setting_summary = $4,
    setting = $5,
    image_url = $6,
    is_public = $7,
    game_system = $8,
    number_of_players = $9,
    status = $10,
    updated_at = CURRENT_TIMESTAMP
FROM campaign_members AS cm
WHERE cm.campaign_id = c.id
  AND c.id = $1
  AND (
      c.is_public = true OR
      cm.user_id = $2
    )
RETURNING
    c.id,
    c.title,
    c.setting_summary,
    c.setting,
    c.game_system,
    c.number_of_players,
    c.status,
    c.image_url,
    c.is_public,
    c.invite_code,
    c.setting_metadata,
    c.setting_ai_metadata,
    c.created_by,
    c.created_at,
    c.updated_at
`

type UpdateCampaignParams struct {
	ID              pgtype.UUID        `json:"id"`
	UserID          pgtype.UUID        `json:"user_id"`
	Title           string             `json:"title"`
	SettingSummary  pgtype.Text        `json:"setting_summary"`
	Setting         pgtype.Text        `json:"setting"`
	ImageUrl        pgtype.Text        `json:"image_url"`
	IsPublic        bool               `json:"is_public"`
	GameSystem      GameSystemEnum     `json:"game_system"`
	NumberOfPlayers pgtype.Int2        `json:"number_of_players"`
	Status          CampaignStatusEnum `json:"status"`
}

func (q *Queries) UpdateCampaign(ctx context.Context, arg UpdateCampaignParams) (Campaign, error) {
	row := q.db.QueryRow(ctx, updateCampaign,
		arg.ID,
		arg.UserID,
		arg.Title,
		arg.SettingSummary,
		arg.Setting,
		arg.ImageUrl,
		arg.IsPublic,
		arg.GameSystem,
		arg.NumberOfPlayers,
		arg.Status,
	)
	var i Campaign
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.SettingSummary,
		&i.Setting,
		&i.GameSystem,
		&i.NumberOfPlayers,
		&i.Status,
		&i.ImageUrl,
		&i.IsPublic,
		&i.InviteCode,
		&i.SettingMetadata,
		&i.SettingAiMetadata,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCampaignMember = `-- name: UpdateCampaignMember :one
UPDATE campaign_members
SET 
    role = $3,
    last_accessed = CURRENT_TIMESTAMP
WHERE campaign_id = $1 AND user_id = $2
RETURNING id, campaign_id, user_id, role, joined_at, last_accessed
`

type UpdateCampaignMemberParams struct {
	CampaignID pgtype.UUID `json:"campaign_id"`
	UserID     pgtype.UUID `json:"user_id"`
	Role       MemberRole  `json:"role"`
}

func (q *Queries) UpdateCampaignMember(ctx context.Context, arg UpdateCampaignMemberParams) (CampaignMember, error) {
	row := q.db.QueryRow(ctx, updateCampaignMember, arg.CampaignID, arg.UserID, arg.Role)
	var i CampaignMember
	err := row.Scan(
		&i.ID,
		&i.CampaignID,
		&i.UserID,
		&i.Role,
		&i.JoinedAt,
		&i.LastAccessed,
	)
	return i, err
}
