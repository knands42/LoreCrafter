// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type CampaignStatusEnum string

const (
	CampaignStatusEnumPLANNING CampaignStatusEnum = "PLANNING"
	CampaignStatusEnumACTIVE   CampaignStatusEnum = "ACTIVE"
	CampaignStatusEnumPAUSED   CampaignStatusEnum = "PAUSED"
	CampaignStatusEnumFINISHED CampaignStatusEnum = "FINISHED"
	CampaignStatusEnumARCHIVED CampaignStatusEnum = "ARCHIVED"
)

func (e *CampaignStatusEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CampaignStatusEnum(s)
	case string:
		*e = CampaignStatusEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for CampaignStatusEnum: %T", src)
	}
	return nil
}

type NullCampaignStatusEnum struct {
	CampaignStatusEnum CampaignStatusEnum `json:"campaign_status_enum"`
	Valid              bool               `json:"valid"` // Valid is true if CampaignStatusEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCampaignStatusEnum) Scan(value interface{}) error {
	if value == nil {
		ns.CampaignStatusEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CampaignStatusEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCampaignStatusEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CampaignStatusEnum), nil
}

type GameSystemEnum string

const (
	GameSystemEnumDND5E        GameSystemEnum = "DND_5E"
	GameSystemEnumPATHFINDER2E GameSystemEnum = "PATHFINDER_2E"
	GameSystemEnumCOC7E        GameSystemEnum = "COC_7E"
	GameSystemEnumCUSTOM       GameSystemEnum = "CUSTOM"
)

func (e *GameSystemEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GameSystemEnum(s)
	case string:
		*e = GameSystemEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for GameSystemEnum: %T", src)
	}
	return nil
}

type NullGameSystemEnum struct {
	GameSystemEnum GameSystemEnum `json:"game_system_enum"`
	Valid          bool           `json:"valid"` // Valid is true if GameSystemEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGameSystemEnum) Scan(value interface{}) error {
	if value == nil {
		ns.GameSystemEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GameSystemEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGameSystemEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GameSystemEnum), nil
}

type InvitationStatus string

const (
	InvitationStatusPending  InvitationStatus = "pending"
	InvitationStatusAccepted InvitationStatus = "accepted"
	InvitationStatusRejected InvitationStatus = "rejected"
	InvitationStatusExpired  InvitationStatus = "expired"
)

func (e *InvitationStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = InvitationStatus(s)
	case string:
		*e = InvitationStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for InvitationStatus: %T", src)
	}
	return nil
}

type NullInvitationStatus struct {
	InvitationStatus InvitationStatus `json:"invitation_status"`
	Valid            bool             `json:"valid"` // Valid is true if InvitationStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullInvitationStatus) Scan(value interface{}) error {
	if value == nil {
		ns.InvitationStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.InvitationStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullInvitationStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.InvitationStatus), nil
}

type MemberRole string

const (
	MemberRoleGm     MemberRole = "gm"
	MemberRolePlayer MemberRole = "player"
)

func (e *MemberRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MemberRole(s)
	case string:
		*e = MemberRole(s)
	default:
		return fmt.Errorf("unsupported scan type for MemberRole: %T", src)
	}
	return nil
}

type NullMemberRole struct {
	MemberRole MemberRole `json:"member_role"`
	Valid      bool       `json:"valid"` // Valid is true if MemberRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMemberRole) Scan(value interface{}) error {
	if value == nil {
		ns.MemberRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MemberRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMemberRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MemberRole), nil
}

// Campaigns are the main entity in the system. They are used to store the campaign data.
type Campaign struct {
	ID    pgtype.UUID `json:"id"`
	Title string      `json:"title"`
	// A summary of the campaign setting.
	SettingSummary pgtype.Text `json:"setting_summary"`
	// The detailed setting of the campaign.
	Setting pgtype.Text `json:"setting"`
	// The game system used for the campaign (e.g., dnd, pathfinder, etc.).
	GameSystem      NullGameSystemEnum `json:"game_system"`
	NumberOfPlayers pgtype.Int2        `json:"number_of_players"`
	// Lifecycle status of the campaign (e.g., planning, active, paused, etc.).
	Status CampaignStatusEnum `json:"status"`
	// The URL of the campaign image.
	ImageUrl pgtype.Text `json:"image_url"`
	// Whether the campaign is available to players outside the campaign.
	IsPublic bool `json:"is_public"`
	// The invite code for the campaign.
	InviteCode pgtype.Text        `json:"invite_code"`
	CreatedBy  pgtype.UUID        `json:"created_by"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

type CampaignMember struct {
	ID           pgtype.UUID        `json:"id"`
	CampaignID   pgtype.UUID        `json:"campaign_id"`
	UserID       pgtype.UUID        `json:"user_id"`
	Role         MemberRole         `json:"role"`
	JoinedAt     pgtype.Timestamptz `json:"joined_at"`
	LastAccessed pgtype.Timestamptz `json:"last_accessed"`
}

type Character struct {
	ID          pgtype.UUID        `json:"id"`
	Name        string             `json:"name"`
	Race        pgtype.Text        `json:"race"`
	Class       pgtype.Text        `json:"class"`
	Level       int32              `json:"level"`
	Appearance  pgtype.Text        `json:"appearance"`
	Personality pgtype.Text        `json:"personality"`
	Backstory   pgtype.Text        `json:"backstory"`
	ImageUrl    pgtype.Text        `json:"image_url"`
	CampaignID  pgtype.UUID        `json:"campaign_id"`
	UserID      pgtype.UUID        `json:"user_id"`
	IsNpc       bool               `json:"is_npc"`
	Metadata    []byte             `json:"metadata"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

type Invitation struct {
	ID         pgtype.UUID        `json:"id"`
	CampaignID pgtype.UUID        `json:"campaign_id"`
	Email      string             `json:"email"`
	InvitedBy  pgtype.UUID        `json:"invited_by"`
	Token      string             `json:"token"`
	Status     InvitationStatus   `json:"status"`
	ExpiresAt  pgtype.Timestamptz `json:"expires_at"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

type TimelineEvent struct {
	ID          pgtype.UUID        `json:"id"`
	CampaignID  pgtype.UUID        `json:"campaign_id"`
	Title       string             `json:"title"`
	Description pgtype.Text        `json:"description"`
	EventDate   pgtype.Timestamptz `json:"event_date"`
	IsPublic    bool               `json:"is_public"`
	CreatedBy   pgtype.UUID        `json:"created_by"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

type User struct {
	ID             pgtype.UUID        `json:"id"`
	Username       string             `json:"username"`
	Email          string             `json:"email"`
	HashedPassword string             `json:"hashed_password"`
	IsActive       bool               `json:"is_active"`
	AvatarUrl      pgtype.Text        `json:"avatar_url"`
	LastLoginAt    pgtype.Timestamptz `json:"last_login_at"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
}
