{
    "schemes": [
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "LoreCrafter API for managing lore and storytelling.",
        "title": "LoreCrafter API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "basePath": "/",
    "paths": {
        "/api/auth/login": {
            "post": {
                "description": "Login a user with the provided credentials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login a user",
                "parameters": [
                    {
                        "description": "User login details",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.LoginInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User logged in successfully",
                        "schema": {
                            "$ref": "#/definitions/domain.AuthOutput"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/register": {
            "post": {
                "description": "Register a new user with the provided credentials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.UserCreationInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "schema": {
                            "$ref": "#/definitions/domain.User"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "User already exists",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/campaigns": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List all campaigns a user is a member of",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "campaigns"
                ],
                "summary": "List user campaigns",
                "responses": {
                    "200": {
                        "description": "Campaigns retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/sqlc.Campaign"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new campaign with the provided details. If use_ai query parameter is true, AI will generate the campaign settings.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "campaigns"
                ],
                "summary": "Create a new campaign",
                "parameters": [
                    {
                        "description": "Campaign creation details",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.CampaignCreationInput"
                        }
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Whether to use AI to generate campaign settings",
                        "name": "use_gen_ai",
                        "in": "query"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Campaign created successfully",
                        "schema": {
                            "$ref": "#/definitions/domain.Campaign"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or parameters",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/campaigns/leave/{campaignID}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allow a user to leave a campaign",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "campaigns"
                ],
                "summary": "Leave a campaign",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Campaign ID",
                        "name": "campaignID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Left campaign successfully"
                    },
                    "400": {
                        "description": "Invalid campaign ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Campaign not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/campaigns/{campaignID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a campaign by ID if the user has access",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "campaigns"
                ],
                "summary": "Get a campaign by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Campaign ID",
                        "name": "campaignID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Campaign retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/domain.Campaign"
                        }
                    },
                    "400": {
                        "description": "Invalid campaign ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Campaign not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a campaign if the user has GM permissions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "campaigns"
                ],
                "summary": "Update a campaign",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Campaign ID",
                        "name": "campaignID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Campaign update details",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/sqlc.Campaign"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Campaign updated successfully",
                        "schema": {
                            "$ref": "#/definitions/sqlc.Campaign"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or campaign ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Campaign not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a campaign if the user has GM permissions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "campaigns"
                ],
                "summary": "Delete a campaign",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Campaign ID",
                        "name": "campaignID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Campaign deleted successfully"
                    },
                    "400": {
                        "description": "Invalid campaign ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Campaign not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/campaigns/{campaignID}/members": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List all members of a campaign if the user has access",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "campaigns"
                ],
                "summary": "List campaign members",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Campaign ID",
                        "name": "campaignID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Campaign members retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/sqlc.CampaignMember"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid campaign ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add a user to a campaign if the requester has GM permissions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "campaigns"
                ],
                "summary": "Add a user to a campaign",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Campaign ID",
                        "name": "campaignID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User ID and role",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User added to campaign successfully"
                    },
                    "400": {
                        "description": "Invalid request body or campaign ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Campaign not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/campaigns/{campaignID}/members/{userID}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove a user from a campaign if the requester has GM permissions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "campaigns"
                ],
                "summary": "Remove a user from a campaign",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Campaign ID",
                        "name": "campaignID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User removed from campaign successfully"
                    },
                    "400": {
                        "description": "Invalid campaign ID or user ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Campaign not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Based on the logged user, get information from the token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get info about the logged user",
                "responses": {
                    "200": {
                        "description": "User information",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authorization header",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.AuthOutput": {
            "type": "object",
            "properties": {
                "expires_at": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/domain.User"
                }
            }
        },
        "domain.Campaign": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "game_system": {
                    "$ref": "#/definitions/sqlc.GameSystemEnum"
                },
                "id": {
                    "type": "string"
                },
                "image_url": {
                    "type": "string"
                },
                "invite_code": {
                    "type": "string"
                },
                "is_public": {
                    "type": "boolean"
                },
                "number_of_players": {
                    "type": "integer"
                },
                "setting": {
                    "type": "string"
                },
                "setting_summary": {
                    "type": "string"
                },
                "settings_ai_metadata": {
                    "$ref": "#/definitions/domain.SettingsAIMetadata"
                },
                "settings_metadata": {
                    "$ref": "#/definitions/domain.SettingsMetadata"
                },
                "status": {
                    "$ref": "#/definitions/sqlc.CampaignStatusEnum"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "domain.CampaignCreationInput": {
            "type": "object",
            "properties": {
                "game_system": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/sqlc.GameSystemEnum"
                        }
                    ],
                    "example": "DND_5E"
                },
                "image_url": {
                    "type": "string",
                    "example": ""
                },
                "is_public": {
                    "type": "boolean",
                    "example": false
                },
                "number_of_players": {
                    "type": "integer",
                    "example": 6
                },
                "setting": {
                    "type": "string",
                    "example": "In the era of Ultron, Superman was a Fairy"
                },
                "setting_summary": {
                    "type": "string",
                    "example": "The fall of the kingdom of Lorecrafter"
                },
                "settings_ai_metadata": {
                    "$ref": "#/definitions/domain.SettingsAIMetadata"
                },
                "settings_metadata": {
                    "$ref": "#/definitions/domain.SettingsMetadata"
                },
                "title": {
                    "type": "string",
                    "example": "Chronicles of the Fall"
                }
            }
        },
        "domain.LoginInput": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "example": "12345678"
                },
                "username": {
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "domain.SettingsAIMetadata": {
            "type": "object",
            "properties": {
                "world_theme": {
                    "type": "string",
                    "example": "Gothic"
                },
                "written_tone": {
                    "type": "string",
                    "example": "Dramatic"
                }
            }
        },
        "domain.SettingsMetadata": {
            "type": "object"
        },
        "domain.User": {
            "type": "object",
            "properties": {
                "avatar_url": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_login_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "domain.UserCreationInput": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john@mail.com"
                },
                "password": {
                    "type": "string",
                    "example": "12345678"
                },
                "username": {
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "pgtype.InfinityModifier": {
            "type": "integer",
            "enum": [
                1,
                0,
                -1
            ],
            "x-enum-varnames": [
                "Infinity",
                "Finite",
                "NegativeInfinity"
            ]
        },
        "pgtype.Int2": {
            "type": "object",
            "properties": {
                "int16": {
                    "type": "integer"
                },
                "valid": {
                    "type": "boolean"
                }
            }
        },
        "pgtype.Text": {
            "type": "object",
            "properties": {
                "string": {
                    "type": "string"
                },
                "valid": {
                    "type": "boolean"
                }
            }
        },
        "pgtype.Timestamptz": {
            "type": "object",
            "properties": {
                "infinityModifier": {
                    "$ref": "#/definitions/pgtype.InfinityModifier"
                },
                "time": {
                    "type": "string"
                },
                "valid": {
                    "type": "boolean"
                }
            }
        },
        "sqlc.Campaign": {
            "type": "object",
            "properties": {
                "created_at": {
                    "$ref": "#/definitions/pgtype.Timestamptz"
                },
                "created_by": {
                    "type": "string"
                },
                "game_system": {
                    "description": "The game system used for the campaign (e.g., dnd, pathfinder, etc.).",
                    "allOf": [
                        {
                            "$ref": "#/definitions/sqlc.GameSystemEnum"
                        }
                    ]
                },
                "id": {
                    "type": "string"
                },
                "image_url": {
                    "description": "The URL of the campaign image.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/pgtype.Text"
                        }
                    ]
                },
                "invite_code": {
                    "description": "The invite code for the campaign.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/pgtype.Text"
                        }
                    ]
                },
                "is_public": {
                    "description": "Whether the campaign is available to players outside the campaign.",
                    "type": "boolean"
                },
                "number_of_players": {
                    "$ref": "#/definitions/pgtype.Int2"
                },
                "setting": {
                    "description": "The detailed setting of the campaign.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/pgtype.Text"
                        }
                    ]
                },
                "setting_ai_metadata": {
                    "description": "Information used by LLMs on how to generate the data (e.g., a dark tone in a high fantasy world).",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "setting_metadata": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "setting_summary": {
                    "description": "A summary of the campaign setting.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/pgtype.Text"
                        }
                    ]
                },
                "status": {
                    "description": "Lifecycle status of the campaign (e.g., planning, active, paused, etc.).",
                    "allOf": [
                        {
                            "$ref": "#/definitions/sqlc.CampaignStatusEnum"
                        }
                    ]
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "$ref": "#/definitions/pgtype.Timestamptz"
                }
            }
        },
        "sqlc.CampaignMember": {
            "type": "object",
            "properties": {
                "campaign_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "joined_at": {
                    "$ref": "#/definitions/pgtype.Timestamptz"
                },
                "last_accessed": {
                    "$ref": "#/definitions/pgtype.Timestamptz"
                },
                "role": {
                    "$ref": "#/definitions/sqlc.MemberRole"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "sqlc.CampaignStatusEnum": {
            "type": "string",
            "enum": [
                "PLANNING",
                "ACTIVE",
                "PAUSED",
                "FINISHED",
                "ARCHIVED"
            ],
            "x-enum-varnames": [
                "CampaignStatusEnumPLANNING",
                "CampaignStatusEnumACTIVE",
                "CampaignStatusEnumPAUSED",
                "CampaignStatusEnumFINISHED",
                "CampaignStatusEnumARCHIVED"
            ]
        },
        "sqlc.GameSystemEnum": {
            "type": "string",
            "enum": [
                "DND_5E",
                "PATHFINDER_2E",
                "COC_7E",
                "OTHER"
            ],
            "x-enum-varnames": [
                "GameSystemEnumDND5E",
                "GameSystemEnumPATHFINDER2E",
                "GameSystemEnumCOC7E",
                "GameSystemEnumOTHER"
            ]
        },
        "sqlc.MemberRole": {
            "type": "string",
            "enum": [
                "gm",
                "player"
            ],
            "x-enum-varnames": [
                "MemberRoleGm",
                "MemberRolePlayer"
            ]
        },
        "utils.ErrorResponse": {
            "type": "object",
            "properties": {
                "details": {},
                "error": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}